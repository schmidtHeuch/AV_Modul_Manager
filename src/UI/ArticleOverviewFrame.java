/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import DBTools.DB_ConnectionManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author schmidtu
 */
public class ArticleOverviewFrame extends javax.swing.JFrame {

    /**
     * Creates new form ArticleOverviewFrame
     */
    public ArticleOverviewFrame() {
        initComponents();
        DataSet_Mode = "clean";
        btn_edit.setEnabled(false);
        btn_delete.setEnabled(false);
        btn_accept.setEnabled(false);
        btn_cancel.setEnabled(false);
    }
    
    boolean myAnswerIfConnected;
    Connection myConnection;
    DefaultTableModel myTableModel;  
    TableRowSorter<DefaultTableModel> mySorter;
    DB_ConnectionManager MY_DBCM;
    String Old_Key;
    String OldSelection_M1;
    String OldSelection_M2;
    String OldSelection_M3;
    String OldSelection_M4 = ""; //später den anderen anpassen
    String OldSelection_M5;    
    String OldSelection_M6;
    String OldSelection_M7;
    String OldSelection_M8;
    String OldSelection_M9;
    String OldSelection_M10;
    String OldSelection_M11;
    String OldSelection_M12;
    String CurrentSelection_M1;
    String CurrentSelection_M2;
    String CurrentSelection_M3;
    String CurrentSelection_M4 = ""; //später den anderen anpassen
    String CurrentSelection_M5;    
    String CurrentSelection_M6;
    String CurrentSelection_M7;
    String CurrentSelection_M8;
    String CurrentSelection_M9;
    String CurrentSelection_M10;
    String CurrentSelection_M11;
    String CurrentSelection_M12;
    String Old_Schicht;
    String Old_Bemerkungen;
    int OldSelection;
    String DataSet_Mode;
    Timestamp Anlagedatum;
    Timestamp Änderungsdatum;
    String Benutzer;
    int statementResult;
    int TableColumns;
    
    private void do_preBuild() {                
        getDBConnection();
        get_DBTableData();
        myTableModel = (DefaultTableModel) jTable_dbData.getModel();      
        createRowSorter(myTableModel);
        lbl_rowCount.setText(String.valueOf(mySorter.getViewRowCount()) + " / " + String.valueOf(myTableModel.getRowCount()));  
    }
    
    private void createRowSorter(DefaultTableModel aModel) {
        mySorter = new TableRowSorter<>(aModel);
        jTable_dbData.setRowSorter(mySorter);
    }
    
    public void search() {
        String searchTerm = jTextField_searchValue.getText();
        mySorter.setRowFilter(RowFilter.regexFilter(searchTerm));
    }
    
    private void do_postBuild() {                
        jTable_dbData.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            set_valuesIntoInputFields();
        });        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_table = new javax.swing.JPanel();
        jScrollPane_table = new javax.swing.JScrollPane();
        jTable_dbData = new javax.swing.JTable();
        lbl_searchValue = new javax.swing.JLabel();
        jTextField_searchValue = new javax.swing.JTextField();
        btn_deleteSearchValue = new javax.swing.JButton();
        lbl_rowCount = new javax.swing.JLabel();
        btn_getCurrentDBData = new javax.swing.JButton();
        jPanel_editData = new javax.swing.JPanel();
        lbl_KPArtikelNummer = new javax.swing.JLabel();
        lbl_Schicht = new javax.swing.JLabel();
        jTextField_key = new javax.swing.JTextField();
        jTextField_Schicht = new javax.swing.JTextField();
        lbl_editData = new javax.swing.JLabel();
        jCheckBox_M1 = new javax.swing.JCheckBox();
        jCheckBox_M2 = new javax.swing.JCheckBox();
        jCheckBox_M3 = new javax.swing.JCheckBox();
        jCheckBox_M4 = new javax.swing.JCheckBox();
        jCheckBox_M5 = new javax.swing.JCheckBox();
        jCheckBox_M6 = new javax.swing.JCheckBox();
        jCheckBox_M7 = new javax.swing.JCheckBox();
        jCheckBox_M8 = new javax.swing.JCheckBox();
        jCheckBox_M9 = new javax.swing.JCheckBox();
        jCheckBox_M10 = new javax.swing.JCheckBox();
        jCheckBox_M11 = new javax.swing.JCheckBox();
        jCheckBox_M12 = new javax.swing.JCheckBox();
        jScrollPane_remarks = new javax.swing.JScrollPane();
        jTextArea_Bemerkungen = new javax.swing.JTextArea();
        btn_accept = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        btn_new = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        lbl_Anlagedatum = new javax.swing.JLabel();
        lbl_Änderungsdatum = new javax.swing.JLabel();
        lbl_Benutzer = new javax.swing.JLabel();
        jTextField_Anlagedatum = new javax.swing.JTextField();
        jTextField_Änderungsdatum = new javax.swing.JTextField();
        jTextField_Benutzer = new javax.swing.JTextField();
        jPanel_footer = new javax.swing.JPanel();
        btn_close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel_table.setPreferredSize(new java.awt.Dimension(1080, 498));

        jTable_dbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "KP Artikel-Nr.", "M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", "Bemerkungen", "Schicht", "Anlagedatum", "Änderungsdatum", "Benutzer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_dbData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable_dbData.setAutoscrolls(false);
        jTable_dbData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane_table.setViewportView(jTable_dbData);
        if (jTable_dbData.getColumnModel().getColumnCount() > 0) {
            jTable_dbData.getColumnModel().getColumn(0).setMinWidth(100);
            jTable_dbData.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable_dbData.getColumnModel().getColumn(1).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(1).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(2).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(3).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(4).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(5).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(6).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(6).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(7).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(7).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(8).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(8).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(9).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(9).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(10).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(10).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(11).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(11).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(12).setMinWidth(40);
            jTable_dbData.getColumnModel().getColumn(12).setPreferredWidth(40);
            jTable_dbData.getColumnModel().getColumn(13).setMinWidth(200);
            jTable_dbData.getColumnModel().getColumn(13).setPreferredWidth(200);
            jTable_dbData.getColumnModel().getColumn(14).setMinWidth(50);
            jTable_dbData.getColumnModel().getColumn(14).setPreferredWidth(50);
            jTable_dbData.getColumnModel().getColumn(15).setMinWidth(150);
            jTable_dbData.getColumnModel().getColumn(15).setPreferredWidth(150);
            jTable_dbData.getColumnModel().getColumn(16).setMinWidth(150);
            jTable_dbData.getColumnModel().getColumn(16).setPreferredWidth(150);
            jTable_dbData.getColumnModel().getColumn(17).setMinWidth(100);
            jTable_dbData.getColumnModel().getColumn(17).setPreferredWidth(100);
        }

        lbl_searchValue.setText("Suchen:");

        jTextField_searchValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField_searchValueKeyReleased(evt);
            }
        });

        btn_deleteSearchValue.setIcon(new javax.swing.ImageIcon("U:\\Eigene\\schmidtu\\images\\Löschen.png")); // NOI18N
        btn_deleteSearchValue.setPreferredSize(new java.awt.Dimension(23, 23));
        btn_deleteSearchValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteSearchValueActionPerformed(evt);
            }
        });

        lbl_rowCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_rowCount.setPreferredSize(new java.awt.Dimension(300, 14));

        btn_getCurrentDBData.setText("Aktualisieren");
        btn_getCurrentDBData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getCurrentDBDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_tableLayout = new javax.swing.GroupLayout(jPanel_table);
        jPanel_table.setLayout(jPanel_tableLayout);
        jPanel_tableLayout.setHorizontalGroup(
            jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_tableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_tableLayout.createSequentialGroup()
                        .addComponent(lbl_searchValue)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel_tableLayout.createSequentialGroup()
                        .addGroup(jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_tableLayout.createSequentialGroup()
                                .addComponent(jTextField_searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_deleteSearchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(btn_getCurrentDBData)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbl_rowCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane_table, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel_tableLayout.setVerticalGroup(
            jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_tableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_searchValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_rowCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField_searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_deleteSearchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_getCurrentDBData)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane_table, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lbl_KPArtikelNummer.setText("KP Artikel-Nr.");
        lbl_KPArtikelNummer.setEnabled(false);
        lbl_KPArtikelNummer.setPreferredSize(new java.awt.Dimension(100, 14));

        lbl_Schicht.setText("Schicht");
        lbl_Schicht.setEnabled(false);
        lbl_Schicht.setPreferredSize(new java.awt.Dimension(50, 14));

        jTextField_key.setEnabled(false);
        jTextField_key.setPreferredSize(new java.awt.Dimension(100, 20));

        jTextField_Schicht.setEnabled(false);
        jTextField_Schicht.setPreferredSize(new java.awt.Dimension(50, 20));

        lbl_editData.setText("Bearbeitung:");

        jCheckBox_M1.setText("<html>M 1 &nbsp &nbsp &nbsp Reinraum -> KEIN PS!!! -> STAL</html>");
        jCheckBox_M1.setEnabled(false);
        jCheckBox_M1.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M2.setText("<html>M 2 &nbsp &nbsp &nbsp STAL</html>");
        jCheckBox_M2.setEnabled(false);
        jCheckBox_M2.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M3.setText("<html>M 3 &nbsp &nbsp &nbsp Bandstahl, Schnittheizung</html>");
        jCheckBox_M3.setEnabled(false);
        jCheckBox_M3.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M4.setText("<html>M 4 &nbsp &nbsp &nbsp nicht verfügbar</html>");
        jCheckBox_M4.setEnabled(false);
        jCheckBox_M4.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M5.setText("<html>M 5 &nbsp &nbsp &nbsp Bandstahl, Folie max. 2 mm, Lochwerkzeug, Brennstation, Schnittheizung, lange Kette</html>");
        jCheckBox_M5.setEnabled(false);
        jCheckBox_M5.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M6.setText("<html>M 6 &nbsp &nbsp &nbsp Bandstahl + STAL, Wechselstaplung, Schnittheizung</html>");
        jCheckBox_M6.setEnabled(false);
        jCheckBox_M6.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M7.setText("<html>M 7 &nbsp &nbsp &nbsp Bandstahl, Wechselstaplung, Schnittheizung</html>");
        jCheckBox_M7.setEnabled(false);
        jCheckBox_M7.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M8.setText("<html>M 8 &nbsp &nbsp &nbsp Bandstahl, Wechselstaplung, Schnittheizung</html>");
        jCheckBox_M8.setEnabled(false);
        jCheckBox_M8.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M9.setText("<html>M 9 &nbsp &nbsp &nbsp Reinraum -> KEIN PS!!! -> Bandstahl, Wechselstaplung, Schnittheizung</html>");
        jCheckBox_M9.setEnabled(false);
        jCheckBox_M9.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M10.setText("<html>M 10 &nbsp &nbsp Bandstahl, Wechselstaplung, Schnittheizung, Handling</html>");
        jCheckBox_M10.setEnabled(false);
        jCheckBox_M10.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M11.setText("<html>M 11 &nbsp &nbsp Bandstahl, Schnittheizung</html>");
        jCheckBox_M11.setEnabled(false);
        jCheckBox_M11.setPreferredSize(new java.awt.Dimension(550, 24));

        jCheckBox_M12.setText("<html>M 12 &nbsp &nbsp STAL, Schnittheizung</html>");
        jCheckBox_M12.setEnabled(false);
        jCheckBox_M12.setPreferredSize(new java.awt.Dimension(550, 24));

        jTextArea_Bemerkungen.setColumns(20);
        jTextArea_Bemerkungen.setRows(2);
        jTextArea_Bemerkungen.setBorder(javax.swing.BorderFactory.createTitledBorder("Bemerkungen"));
        jTextArea_Bemerkungen.setEnabled(false);
        jScrollPane_remarks.setViewportView(jTextArea_Bemerkungen);

        btn_accept.setText("Übernehmen");
        btn_accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_acceptActionPerformed(evt);
            }
        });

        btn_cancel.setText("Abbrechen");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        btn_new.setText("Neu");
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });

        btn_edit.setText("Bearbeiten");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setText("Löschen");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        lbl_Anlagedatum.setText("Anlagedatum:");
        lbl_Anlagedatum.setEnabled(false);
        lbl_Anlagedatum.setPreferredSize(new java.awt.Dimension(120, 20));

        lbl_Änderungsdatum.setText("Änderungsdatum:");
        lbl_Änderungsdatum.setEnabled(false);
        lbl_Änderungsdatum.setPreferredSize(new java.awt.Dimension(120, 20));

        lbl_Benutzer.setText("Von:");
        lbl_Benutzer.setEnabled(false);
        lbl_Benutzer.setPreferredSize(new java.awt.Dimension(120, 20));

        jTextField_Anlagedatum.setEditable(false);
        jTextField_Anlagedatum.setBorder(null);
        jTextField_Anlagedatum.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        jTextField_Anlagedatum.setEnabled(false);
        jTextField_Anlagedatum.setPreferredSize(new java.awt.Dimension(204, 20));

        jTextField_Änderungsdatum.setEditable(false);
        jTextField_Änderungsdatum.setBorder(null);
        jTextField_Änderungsdatum.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        jTextField_Änderungsdatum.setEnabled(false);
        jTextField_Änderungsdatum.setPreferredSize(new java.awt.Dimension(204, 20));

        jTextField_Benutzer.setEditable(false);
        jTextField_Benutzer.setBorder(null);
        jTextField_Benutzer.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        jTextField_Benutzer.setEnabled(false);
        jTextField_Benutzer.setPreferredSize(new java.awt.Dimension(204, 20));

        javax.swing.GroupLayout jPanel_editDataLayout = new javax.swing.GroupLayout(jPanel_editData);
        jPanel_editData.setLayout(jPanel_editDataLayout);
        jPanel_editDataLayout.setHorizontalGroup(
            jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_editDataLayout.createSequentialGroup()
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel_editDataLayout.createSequentialGroup()
                            .addComponent(lbl_KPArtikelNummer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lbl_Schicht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel_editDataLayout.createSequentialGroup()
                            .addComponent(jTextField_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField_Schicht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel_editDataLayout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBox_M12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_M5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel_editDataLayout.createSequentialGroup()
                            .addComponent(btn_accept)
                            .addGap(5, 5, 5)
                            .addComponent(btn_cancel))
                        .addComponent(lbl_editData)
                        .addGroup(jPanel_editDataLayout.createSequentialGroup()
                            .addComponent(btn_new)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_edit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_delete))
                        .addComponent(jScrollPane_remarks))
                    .addGroup(jPanel_editDataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_Anlagedatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Benutzer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Änderungsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_Anlagedatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Benutzer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Änderungsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel_editDataLayout.setVerticalGroup(
            jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_editDataLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lbl_editData)
                .addGap(18, 18, 18)
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_KPArtikelNummer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Schicht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Schicht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox_M1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox_M2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox_M12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane_remarks, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_editDataLayout.createSequentialGroup()
                        .addComponent(lbl_Anlagedatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_Änderungsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_Benutzer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_editDataLayout.createSequentialGroup()
                        .addComponent(jTextField_Anlagedatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Änderungsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Benutzer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_new)
                    .addComponent(btn_edit)
                    .addComponent(btn_delete))
                .addGap(13, 13, 13)
                .addGroup(jPanel_editDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_accept)
                    .addComponent(btn_cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_close.setText("Schließen");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_footerLayout = new javax.swing.GroupLayout(jPanel_footer);
        jPanel_footer.setLayout(jPanel_footerLayout);
        jPanel_footerLayout.setHorizontalGroup(
            jPanel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_footerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_close)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_footerLayout.setVerticalGroup(
            jPanel_footerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_footerLayout.createSequentialGroup()
                .addComponent(btn_close)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel_footer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_table, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_editData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel_editData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_table, javax.swing.GroupLayout.PREFERRED_SIZE, 946, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getDBConnection() { 
        MY_DBCM = new DB_ConnectionManager("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "CONNECT");
        if (!MY_DBCM.isConnnected()) {
            JOptionPane.showMessageDialog(null,
                    "Der Verbindungs-Aufbau zur Datenbank ist gescheitert. Bitte wenden Sie sich an den Entwickler.",
                    "Fehler",
                    JOptionPane.ERROR_MESSAGE);
//            return;
        }        
    }
   
    private void get_DBTableData() {         
        try
        { 
            MY_DBCM.setConnection_CLOSED("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "DISCONNECT");
            MY_DBCM = new DB_ConnectionManager("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "CONNECT");
            myConnection = MY_DBCM.getConnection();
            Statement myStatement = myConnection.createStatement();
            String mySQL = "SELECT * FROM DiafBDE.dbo.T_Artikel_Maschine_Schicht";
            ResultSet myResultSet = myStatement.executeQuery(mySQL);            
            TableColumns = myResultSet.getMetaData().getColumnCount();
            myTableModel = (DefaultTableModel) jTable_dbData.getModel();
            int allOldRows = myTableModel.getRowCount();
            if (allOldRows > 0) {
                myTableModel.setRowCount(0);
            }
            while (myResultSet.next()) {
                  
                String[] myValue = new String[TableColumns];
                SimpleDateFormat myFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
                
                for (int i = 1; i <= TableColumns; i++) {                          
                    String myDataSet = myResultSet.getString(i);
                    if (myDataSet != null && i == 16 || myDataSet != null && i == 17) {
                        Timestamp ts = Timestamp.valueOf(myDataSet);
                        myDataSet = myFormat.format(ts);
                    }
                    myValue[i-1] = myDataSet;
                }  
                myTableModel.addRow(myValue); 
            }
            if (!myResultSet.next()) {
            } 
        }
        catch (SQLException myException )
        {
            System.out.println(myException);
        }
        finally {
            try {
                set_inputFieldsEmpty(); 
                if (myConnection != null && !myConnection.isClosed()) {
                    myConnection.close();
                }
            } catch (SQLException myException) {
                System.out.println(myException);
            }
        } 
    }
    
    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // TODO add your handling code here:
        if (MY_DBCM.isConnnected()) {
            MY_DBCM.setConnection_CLOSED("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "DISCONNECT");
        }
        int myReturnValue = test_continueEditing();
            if (myReturnValue != 0 || DataSet_Mode.equals("clean")) {
                this.dispose();
            }
    }//GEN-LAST:event_btn_closeActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        do_preBuild();
        do_postBuild();
    }//GEN-LAST:event_formWindowOpened

    private void jTextField_searchValueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField_searchValueKeyReleased
        // TODO add your handling code here:
        search();
        lbl_rowCount.setText(String.valueOf(mySorter.getViewRowCount()) + " / " + String.valueOf(myTableModel.getRowCount()));
    }//GEN-LAST:event_jTextField_searchValueKeyReleased

    private void btn_deleteSearchValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteSearchValueActionPerformed
        // TODO add your handling code here:
        jTextField_searchValue.setText("");
        search();
        lbl_rowCount.setText(String.valueOf(mySorter.getViewRowCount()) + " / " + String.valueOf(myTableModel.getRowCount()));
    }//GEN-LAST:event_btn_deleteSearchValueActionPerformed

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        // TODO add your handling code here:
        DataSet_Mode = "new";
        set_inputFieldsEnabled(true);
        set_oldValues();
        set_tableEnabled(false);
        set_inputFieldsEmpty();
        jTextField_key.requestFocus();
        jTextField_key.setText("KP");
        btn_new.setEnabled(false);
        btn_edit.setEnabled(false);
        btn_delete.setEnabled(false);
        btn_accept.setEnabled(true);
        btn_cancel.setEnabled(true);
    }//GEN-LAST:event_btn_newActionPerformed

    private void btn_acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_acceptActionPerformed
        // TODO add your handling code here:
        if (jTextField_key.getText().isEmpty() || jTextField_key.getText().equals("KP")) {
            
            JOptionPane.showMessageDialog(null,
                    "Der Datensatz ist teilweise leer. Erfassen Sie Daten oder klicken Sie auf Abbrechen.",
                    "Fehler",
                    JOptionPane.ERROR_MESSAGE);
//            return;
        }
        else {
            setCurrentValues();
            boolean myAnswer = test_isDataSetInDB(jTextField_key.getText().trim());
            
            if (myAnswer == true) {
                if (DataSet_Mode.equals("new")) {
                    JOptionPane.showMessageDialog(null,
                        "Es existiert schon ein Datensatz mit diesem Key: \n\n >> " + jTextField_key.getText().trim() + " <<.",
                        "Fehler",
                        JOptionPane.ERROR_MESSAGE);
                        return;
                }
                if (DataSet_Mode.equals("edit")  && !OldSelection_M1.equals(CurrentSelection_M1)
                        ||!OldSelection_M2.equals(CurrentSelection_M2)
                        ||!OldSelection_M3.equals(CurrentSelection_M3)
                        ||!OldSelection_M4.equals(CurrentSelection_M4)
                        ||!OldSelection_M5.equals(CurrentSelection_M5)
                        ||!OldSelection_M6.equals(CurrentSelection_M6)
                        ||!OldSelection_M7.equals(CurrentSelection_M7)
                        ||!OldSelection_M8.equals(CurrentSelection_M8)
                        ||!OldSelection_M9.equals(CurrentSelection_M9)
                        ||!OldSelection_M10.equals(CurrentSelection_M10)
                        ||!OldSelection_M11.equals(CurrentSelection_M11)
                        ||!OldSelection_M12.equals(CurrentSelection_M12)
                        ||!Old_Bemerkungen.equals(jTextArea_Bemerkungen.getText())
                        ||!Old_Schicht.equals(jTextField_Schicht.getText())) {                    
                    do_updateDataSet_inDB();
                }
            }
            if (myAnswer == false) {
                if (DataSet_Mode.equals("new")) {
                    do_insertDataSet_intoDB();
                }
            }
            set_inputFieldsDisabled();  
            btn_new.setEnabled(true);  
            btn_accept.setEnabled(false); 
            btn_edit.setEnabled(false);
            btn_delete.setEnabled(false);
            btn_cancel.setEnabled(false);  
//            if (jTable_dbData.getSelectedRow() > -1) {
//                
//                btn_edit.setEnabled(true);
//                btn_delete.setEnabled(true);                
//            }
//            else {                
//                btn_edit.setEnabled(false);
//                btn_delete.setEnabled(false);
//            } 
            set_tableEnabled(true);
            get_DBTableData();
            lbl_rowCount.setText(String.valueOf(mySorter.getViewRowCount()) + " / " + String.valueOf(myTableModel.getRowCount()));     
        }
        DataSet_Mode = "clean";
    }//GEN-LAST:event_btn_acceptActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // TODO add your handling code here:
        DataSet_Mode = "edit";
        set_oldValues();
        set_tableEnabled(false);
        set_inputFieldsEnabled(false);
        btn_new.setEnabled(false);
        btn_edit.setEnabled(false);
        btn_delete.setEnabled(false);
        btn_accept.setEnabled(true);
        btn_cancel.setEnabled(true);
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        DataSet_Mode = "delete";
        if (DataSet_Mode.equals("delete") && test_isDataSetInDB(jTextField_key.getText().trim()) == true) {
            int myAnswer = JOptionPane.showConfirmDialog(null,
                    "Soll der Datensatz KP Artikel-Nr. (Key): \n\n >> " + jTextField_key.getText().trim() + " << \n\n wirklich gelöscht werden?",
                    "Datensatz löschen?",
                    JOptionPane.YES_NO_OPTION);
            if (myAnswer == 0) {
                statementResult = 0;
                statementResult = do_deleteDataSet_inDB();
                if (statementResult == 0) {
                    JOptionPane.showMessageDialog(null,
                    "Dieser Datensatz kann nicht gelöscht werden, da er von anderen Daten referenziert wird.");
                }  
                get_DBTableData();
//                set_textFieldsEmpty();
                set_inputFieldsDisabled();
                btn_new.setEnabled(true);
                btn_edit.setEnabled(false);
                btn_delete.setEnabled(false);
                btn_accept.setEnabled(false);
                btn_cancel.setEnabled(false);
                lbl_rowCount.setText(String.valueOf(mySorter.getViewRowCount()) + " / " + String.valueOf(myTableModel.getRowCount()));       
            }
        }
        DataSet_Mode = "clean";
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        get_oldValues();   
        set_inputFieldsDisabled(); 
        btn_new.setEnabled(true);
        if (!Old_Key.equals("")) {
            btn_edit.setEnabled(true);
            btn_delete.setEnabled(true);
        }
        btn_accept.setEnabled(false);
        btn_cancel.setEnabled(false); 
        set_tableEnabled(true);
        DataSet_Mode = "clean"; 
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void btn_getCurrentDBDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getCurrentDBDataActionPerformed
        // TODO add your handling code here:
        get_DBTableData();
        btn_new.setEnabled(true);
        btn_edit.setEnabled(false);
        btn_delete.setEnabled(false);
        btn_accept.setEnabled(false);
        btn_cancel.setEnabled(false);
    }//GEN-LAST:event_btn_getCurrentDBDataActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int myReturnValue = test_continueEditing();
            if (myReturnValue != 0) {
                this.dispose();
            }
    }//GEN-LAST:event_formWindowClosing

    private int test_continueEditing() {
        int myAnswer = 0;
        if (!DataSet_Mode.equals("clean")) {

            myAnswer = JOptionPane.showOptionDialog(null, 
            "Es existieren noch ungespeicherte Änderungenn. \n Möchten Sie die Bearbeitung fortsetzen oder das Fenster schließen?", 
            "Bearbeitung fortsetzen?", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.INFORMATION_MESSAGE, 
            null, 
            new String[]{"Bearbeitung fortsetzen", "Fenster schließen"},
            "default");
            }
        return myAnswer;
    }
    private void set_inputFieldsEmpty() {
        jTextField_key.setText("");
        jTextField_Schicht.setText("");
        jTextArea_Bemerkungen.setText("");
        jCheckBox_M1.setSelected(false);
        jCheckBox_M2.setSelected(false);
        jCheckBox_M3.setSelected(false);
//        jCheckBox_M4.setSelected(false); <- später ändern
        jCheckBox_M5.setSelected(false);
        jCheckBox_M6.setSelected(false);
        jCheckBox_M7.setSelected(false);
        jCheckBox_M8.setSelected(false);
        jCheckBox_M9.setSelected(false);
        jCheckBox_M10.setSelected(false);
        jCheckBox_M11.setSelected(false);
        jCheckBox_M12.setSelected(false);
        jTextField_Anlagedatum.setText("");
        jTextField_Änderungsdatum.setText("");
        jTextField_Benutzer.setText("");
    }
    
    private void set_valuesIntoInputFields() {
//        if (!DataSet_Mode.equals("edit")) {
            OldSelection = jTable_dbData.getSelectedRow();
            if(OldSelection != -1) {

                int myRow = jTable_dbData.convertRowIndexToModel(OldSelection);                
                jTextField_key.setText(myTableModel.getValueAt(myRow, 0).toString().trim()); 
                
                if (myTableModel.getValueAt(myRow, 1) != null && myTableModel.getValueAt(myRow, 1).toString().equals("X")) {
                    jCheckBox_M1.setSelected(true);
                }
                else {jCheckBox_M1.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 2) != null && myTableModel.getValueAt(myRow, 2).toString().equals("X")) {
                    jCheckBox_M2.setSelected(true);
                }
                else {jCheckBox_M2.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 3) != null && myTableModel.getValueAt(myRow, 3).toString().equals("X")) {
                    jCheckBox_M3.setSelected(true);
                }
                else {jCheckBox_M3.setSelected(false);}
//                if (myTableModel.getValueAt(myRow, 4).toString().equals("X")) {
//                    jCheckBox_M4.setSelected(true);
//                }
//                else {jCheckBox_M4.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 5) != null && myTableModel.getValueAt(myRow, 5).toString().equals("X")) {
                    jCheckBox_M5.setSelected(true);
                }
                else {jCheckBox_M5.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 6) != null && myTableModel.getValueAt(myRow, 6).toString().equals("X")) {
                    jCheckBox_M6.setSelected(true);
                }
                else {jCheckBox_M6.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 7) != null && myTableModel.getValueAt(myRow, 7).toString().equals("X")) {
                    jCheckBox_M7.setSelected(true);
                }
                else {jCheckBox_M7.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 8) != null && myTableModel.getValueAt(myRow, 8).toString().equals("X")) {
                    jCheckBox_M8.setSelected(true);
                }
                else {jCheckBox_M8.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 9) != null && myTableModel.getValueAt(myRow, 9).toString().equals("X")) {
                    jCheckBox_M9.setSelected(true);
                }
                else {jCheckBox_M9.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 10) != null && myTableModel.getValueAt(myRow, 10).toString().equals("X")) {
                    jCheckBox_M10.setSelected(true);
                }
                else {jCheckBox_M10.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 11) != null && myTableModel.getValueAt(myRow, 11).toString().equals("X")) {
                    jCheckBox_M11.setSelected(true);
                }
                else {jCheckBox_M11.setSelected(false);}
                if (myTableModel.getValueAt(myRow, 12) != null && myTableModel.getValueAt(myRow, 12).toString().equals("X")) {
                    jCheckBox_M12.setSelected(true);
                }
                else {jCheckBox_M12.setSelected(false);}
                jTextArea_Bemerkungen.setText(myTableModel.getValueAt(myRow, 13).toString().trim());               
                jTextField_Schicht.setText(myTableModel.getValueAt(myRow, 14).toString().trim());
                
                if (myTableModel.getValueAt(myRow, 15) != null) {
                    jTextField_Anlagedatum.setText(myTableModel.getValueAt(myRow, 15).toString().trim());
                }
                else {jTextField_Anlagedatum.setText("");}
                if (myTableModel.getValueAt(myRow, 16) != null) {
                   jTextField_Änderungsdatum.setText(myTableModel.getValueAt(myRow, 16).toString().trim());
                }
                else {jTextField_Änderungsdatum.setText("");}
                if (myTableModel.getValueAt(myRow, 17) != null) {
                    jTextField_Benutzer.setText(myTableModel.getValueAt(myRow, 17).toString().trim()); 
                }
                else {jTextField_Benutzer.setText("");}
                
                btn_edit.setEnabled(true);
                btn_delete.setEnabled(true); 
            }  
//        }
    }
    private void set_inputFieldsEnabled(boolean aBoolean) {
        
        lbl_KPArtikelNummer.setEnabled(true);
        lbl_Schicht.setEnabled(true); 
        jTextField_Schicht.setEnabled(true);
        jCheckBox_M1.setEnabled(true);
        jCheckBox_M2.setEnabled(true);
        jCheckBox_M3.setEnabled(true);
//        jCheckBox_M4.setEnabled(true);
        jCheckBox_M5.setEnabled(true);
        jCheckBox_M6.setEnabled(true);
        jCheckBox_M7.setEnabled(true);
        jCheckBox_M8.setEnabled(true);
        jCheckBox_M9.setEnabled(true);
        jCheckBox_M10.setEnabled(true);
        jCheckBox_M11.setEnabled(true);
        jCheckBox_M12.setEnabled(true);
        jTextArea_Bemerkungen.setEnabled(true);
        jTextField_key.setEnabled(aBoolean);
    }
    
    private void set_inputFieldsDisabled() {
        
        lbl_KPArtikelNummer.setEnabled(false);
        lbl_Schicht.setEnabled(false); 
        jTextField_key.setEnabled(false);
        jTextField_Schicht.setEnabled(false);
        jCheckBox_M1.setEnabled(false);
        jCheckBox_M2.setEnabled(false);
        jCheckBox_M3.setEnabled(false);
//        jCheckBox_M4.setEnabled(false);
        jCheckBox_M5.setEnabled(false);
        jCheckBox_M6.setEnabled(false);
        jCheckBox_M7.setEnabled(false);
        jCheckBox_M8.setEnabled(false);
        jCheckBox_M9.setEnabled(false);
        jCheckBox_M10.setEnabled(false);
        jCheckBox_M11.setEnabled(false);
        jCheckBox_M12.setEnabled(false);
        jTextArea_Bemerkungen.setEnabled(false);
    }
    
    private void set_oldValues() {
        Old_Key = jTextField_key.getText().trim();
        if (jCheckBox_M1.isSelected()) {
            OldSelection_M1 = "X";
        }
        else {OldSelection_M1 = "";}
        if (jCheckBox_M2.isSelected()) {
            OldSelection_M2 = "X";
        }
        else {OldSelection_M2 = "";}
        if (jCheckBox_M3.isSelected()) {
            OldSelection_M3 = "X";
        }
        else {OldSelection_M3 = "";}
//        if (jCheckBox_M4.isSelected()) {
//            OldSelection_M4 = "X";
//        }
//        else {OldSelection_M4 = "";}
        if (jCheckBox_M5.isSelected()) {
            OldSelection_M5 = "X";
        }
        else {OldSelection_M5 = "";}
        if (jCheckBox_M6.isSelected()) {
            OldSelection_M6 = "X";
        }
        else {OldSelection_M6 = "";}
        if (jCheckBox_M7.isSelected()) {
            OldSelection_M7 = "X";
        }
        else {OldSelection_M7 = "";}
        if (jCheckBox_M8.isSelected()) {
            OldSelection_M8 = "X";
        }
        else {OldSelection_M8 = "";}
        if (jCheckBox_M9.isSelected()) {
            OldSelection_M9 = "X";
        }
        else {OldSelection_M9 = "";}
        if (jCheckBox_M10.isSelected()) {
            OldSelection_M10 = "X";
        }
        else {OldSelection_M10 = "";}
        if (jCheckBox_M11.isSelected()) {
            OldSelection_M11 = "X";
        }
        else {OldSelection_M11 = "";}
        if (jCheckBox_M12.isSelected()) {
            OldSelection_M12 = "X";
        }
        else {OldSelection_M12 = "";}
        Old_Schicht = jTextField_Schicht.getText().trim();
        Old_Bemerkungen = jTextArea_Bemerkungen.getText().trim();
        
    }
    
    private void setCurrentValues() {
        if (jCheckBox_M1.isSelected()) {
            CurrentSelection_M1 = "X";
        }
        else {CurrentSelection_M1 = "";}
        if (jCheckBox_M2.isSelected()) {
            CurrentSelection_M2 = "X";
        }
        else {CurrentSelection_M2 = "";}
        if (jCheckBox_M3.isSelected()) {
            CurrentSelection_M3 = "X";
        }
        else {CurrentSelection_M3 = "";}
//        if (jCheckBox_M4.isSelected()) {
//            CurrentSelection_M4 = "X";
//        }
//        else {CurrentSelection_M4 = "";}
        if (jCheckBox_M5.isSelected()) {
            CurrentSelection_M5 = "X";
        }
        else {CurrentSelection_M5 = "";}
        if (jCheckBox_M6.isSelected()) {
            CurrentSelection_M6 = "X";
        }
        else {CurrentSelection_M6 = "";}
        if (jCheckBox_M7.isSelected()) {
            CurrentSelection_M7 = "X";
        }
        else {CurrentSelection_M7 = "";}
        if (jCheckBox_M8.isSelected()) {
            CurrentSelection_M8 = "X";
        }
        else {CurrentSelection_M8 = "";}
        if (jCheckBox_M9.isSelected()) {
            CurrentSelection_M9 = "X";
        }
        else {CurrentSelection_M9 = "";}
        if (jCheckBox_M10.isSelected()) {
            CurrentSelection_M10 = "X";
        }
        else {CurrentSelection_M10 = "";}
        if (jCheckBox_M11.isSelected()) {
            CurrentSelection_M11 = "X";
        }
        else {CurrentSelection_M11 = "";}
        if (jCheckBox_M12.isSelected()) {
            CurrentSelection_M12 = "X";
        }
        else {CurrentSelection_M12 = "";}
        
    }
    private void get_oldValues() {
        jTextField_key.setText(Old_Key);
        if (OldSelection_M1.equals("X")) {
            jCheckBox_M1.setSelected(true);
        }
        else {jCheckBox_M1.setSelected(false);}
        if (OldSelection_M2.equals("X")) {
            jCheckBox_M2.setSelected(true);
        }
        else {jCheckBox_M2.setSelected(false);}
        if (OldSelection_M3.equals("X")) {
            jCheckBox_M3.setSelected(true);
        }
        else {jCheckBox_M3.setSelected(false);}
//        if (OldSelection_M4.equals("X")) {
//            jCheckBox_M4.setSelected(true);
//        }
//        else {jCheckBox_M4.setSelected(false);}
        if (OldSelection_M5.equals("X")) {
            jCheckBox_M5.setSelected(true);
        }
        else {jCheckBox_M5.setSelected(false);}
        if (OldSelection_M6.equals("X")) {
            jCheckBox_M6.setSelected(true);
        }
        else {jCheckBox_M6.setSelected(false);}
        if (OldSelection_M7.equals("X")) {
            jCheckBox_M7.setSelected(true);
        }
        else {jCheckBox_M7.setSelected(false);}
        if (OldSelection_M8.equals("X")) {
            jCheckBox_M8.setSelected(true);
        }
        else {jCheckBox_M8.setSelected(false);}
        if (OldSelection_M9.equals("X")) {
            jCheckBox_M9.setSelected(true);
        }
        else {jCheckBox_M9.setSelected(false);}
        if (OldSelection_M10.equals("X")) {
            jCheckBox_M10.setSelected(true);
        }
        else {jCheckBox_M10.setSelected(false);}
        if (OldSelection_M11.equals("X")) {
            jCheckBox_M11.setSelected(true);
        }
        else {jCheckBox_M11.setSelected(false);}
        if (OldSelection_M12.equals("X")) {
            jCheckBox_M12.setSelected(true);
        }
        else {jCheckBox_M12.setSelected(false);}
        jTextArea_Bemerkungen.setText(Old_Bemerkungen);
        jTextField_Schicht.setText(Old_Schicht);
        
    }
    
    private void do_insertDataSet_intoDB() {        
        try
        {
//            System.out.println(((Number) jFormattedTextField_value2.getValue()).floatValue());
            MY_DBCM.setConnection_CLOSED("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "DISCONNECT");
            MY_DBCM = new DB_ConnectionManager("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "CONNECT");
            if (MY_DBCM.isConnnected()) 
            {    
            myConnection = MY_DBCM.getConnection();
            SimpleDateFormat myFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
            Anlagedatum = new Timestamp(System.currentTimeMillis());
            String result = myFormat.format(Anlagedatum);
            Benutzer = System.getProperty("user.name"); 
            Statement myStatement = myConnection.createStatement();
            myStatement.executeUpdate("INSERT INTO DiafBDE.dbo.T_Artikel_Maschine_Schicht (pKey_KP, M1, M2, M3, M4, M5, M6, M7, "
                    + "M8, M9, M10, M11, M12, Bemerkungen, Schicht, Anlagedatum, Benutzer)" 
                    + "VALUES ('" + jTextField_key.getText().trim() + "', '" 
                    + CurrentSelection_M1 + "', '" 
                    + CurrentSelection_M2 + "', '" 
                    + CurrentSelection_M3 + "', '" 
                    + CurrentSelection_M4 + "', '" 
                    + CurrentSelection_M5 + "', '" 
                    + CurrentSelection_M6 + "', '" 
                    + CurrentSelection_M7 + "', '" 
                    + CurrentSelection_M8 + "', '" 
                    + CurrentSelection_M9 + "', '" 
                    + CurrentSelection_M10 + "', '" 
                    + CurrentSelection_M11 + "', '" 
                    + CurrentSelection_M12 + "', '" 
                    + jTextArea_Bemerkungen.getText().trim() + "', '"
                    + jTextField_Schicht.getText().trim() + "', '" 
                    + result + "', '" 
                    + Benutzer +"')");              
            } 
        }
        catch (/*ClassNotFoundException |*/ SQLException myException )
        {
        }
        finally {
            try {
                if (myConnection != null && !myConnection.isClosed()) {
                    myConnection.close();
                }
            } catch (SQLException myException) {
            }
        }         
    }
    
    private void do_updateDataSet_inDB() {        
        try
        {
            MY_DBCM.setConnection_CLOSED("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "DISCONNECT");
            MY_DBCM = new DB_ConnectionManager("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "CONNECT");
            if (MY_DBCM.isConnnected()) 
            {   
            myConnection = MY_DBCM.getConnection();
            SimpleDateFormat myFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
            Änderungsdatum = new Timestamp(System.currentTimeMillis());
            String result = myFormat.format(Änderungsdatum);
            Benutzer = System.getProperty("user.name"); 
            Statement myStatement = myConnection.createStatement();
            myStatement.executeUpdate("UPDATE DiafBDE.dbo.T_Artikel_Maschine_Schicht SET M1 = '" + CurrentSelection_M1 +
                    "', M2 = '" + CurrentSelection_M2 +
                    "', M3 = '" + CurrentSelection_M3 +
                    "', M4 = '" + CurrentSelection_M4 +
                    "', M5 = '" + CurrentSelection_M5 +
                    "', M6 = '" + CurrentSelection_M6 +
                    "', M7 = '" + CurrentSelection_M7 +
                    "', M8 = '" + CurrentSelection_M8 +
                    "', M9 = '" + CurrentSelection_M9 +
                    "', M10 = '" + CurrentSelection_M10 +
                    "', M11 = '" + CurrentSelection_M11 +
                    "', M12 = '" + CurrentSelection_M12 +
                    "', Bemerkungen = '" + jTextArea_Bemerkungen.getText().trim() +
                    "', Schicht = '" + jTextField_Schicht.getText().trim() +
                    "', Änderungsdatum = '" + result +
                    "', Benutzer = '" + Benutzer +
                    "' WHERE pKey_KP = '" + jTextField_key.getText() + "'");             
            } 
        }
        catch (/*ClassNotFoundException |*/ SQLException myException )
        {
        }
        finally {
            try {
                if (myConnection != null && !myConnection.isClosed()) {
                    myConnection.close();
                }
            } catch (SQLException myException) {
            }
        }         
    }
    
    private int do_deleteDataSet_inDB() {        
        try
        {
            MY_DBCM.setConnection_CLOSED("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "DISCONNECT");
            MY_DBCM = new DB_ConnectionManager("jdbc:sqlserver://HV-ABAS-SQL;databaseName=DiafBDE;integratedSecurity=true", "CONNECT");
            if (MY_DBCM.isConnnected()) 
            {   
            myConnection = MY_DBCM.getConnection();
            Statement myStatement = myConnection.createStatement();
            statementResult = myStatement.executeUpdate("DELETE FROM DiafBDE.dbo.T_Artikel_Maschine_Schicht WHERE pKey_KP = '" + jTextField_key.getText().trim() + "'");             
            }   
        }
        catch (/*ClassNotFoundException |*/ SQLException myException )
        {
        }
        finally {
            try {
                if (myConnection != null && !myConnection.isClosed()) {
                    myConnection.close();
                }
            } catch (SQLException myException) {
            }
        }
        return statementResult;          
    }
    
    private boolean test_isDataSetInDB(String aString) {
        boolean myAnswer = false;
        for (int myRow = 0; myRow < jTable_dbData.getRowCount(); ++myRow ) {
            if (myTableModel.getValueAt(myRow, 0).toString().trim().equals(aString))
                myAnswer = true;           
        }
        return myAnswer;
    }
    private void set_tableEnabled(boolean aBoolean) {
        jTextField_searchValue.setEnabled(aBoolean);
        btn_deleteSearchValue.setEnabled(aBoolean);
        btn_getCurrentDBData.setEnabled(aBoolean);
        jTable_dbData.setEnabled(aBoolean);
        for (int i = 0; i < TableColumns; i ++) {
            mySorter.setSortable(i, aBoolean);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArticleOverviewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArticleOverviewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArticleOverviewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArticleOverviewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ArticleOverviewFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_accept;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_deleteSearchValue;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_getCurrentDBData;
    private javax.swing.JButton btn_new;
    private javax.swing.JCheckBox jCheckBox_M1;
    private javax.swing.JCheckBox jCheckBox_M10;
    private javax.swing.JCheckBox jCheckBox_M11;
    private javax.swing.JCheckBox jCheckBox_M12;
    private javax.swing.JCheckBox jCheckBox_M2;
    private javax.swing.JCheckBox jCheckBox_M3;
    private javax.swing.JCheckBox jCheckBox_M4;
    private javax.swing.JCheckBox jCheckBox_M5;
    private javax.swing.JCheckBox jCheckBox_M6;
    private javax.swing.JCheckBox jCheckBox_M7;
    private javax.swing.JCheckBox jCheckBox_M8;
    private javax.swing.JCheckBox jCheckBox_M9;
    private javax.swing.JPanel jPanel_editData;
    private javax.swing.JPanel jPanel_footer;
    private javax.swing.JPanel jPanel_table;
    private javax.swing.JScrollPane jScrollPane_remarks;
    private javax.swing.JScrollPane jScrollPane_table;
    private javax.swing.JTable jTable_dbData;
    private javax.swing.JTextArea jTextArea_Bemerkungen;
    private javax.swing.JTextField jTextField_Anlagedatum;
    private javax.swing.JTextField jTextField_Benutzer;
    private javax.swing.JTextField jTextField_Schicht;
    private javax.swing.JTextField jTextField_key;
    private javax.swing.JTextField jTextField_searchValue;
    private javax.swing.JTextField jTextField_Änderungsdatum;
    private javax.swing.JLabel lbl_Anlagedatum;
    private javax.swing.JLabel lbl_Benutzer;
    private javax.swing.JLabel lbl_KPArtikelNummer;
    private javax.swing.JLabel lbl_Schicht;
    private javax.swing.JLabel lbl_editData;
    private javax.swing.JLabel lbl_rowCount;
    private javax.swing.JLabel lbl_searchValue;
    private javax.swing.JLabel lbl_Änderungsdatum;
    // End of variables declaration//GEN-END:variables
}
