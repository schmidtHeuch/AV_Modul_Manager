/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UI;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
//import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.commons.collections4.*;
import org.apache.xmlbeans.*;
import org.apache.xmlbeans.impl.common.*;
import com.itextpdf.pdfa.*;
//import com.itextpdf.text.pdf.internal.;
import com.itextpdf.kernel.pdf.*;

/**
 *
 * @author schmidtu
 */
public class ConverterFrame extends javax.swing.JFrame {
    String Path_Source;
    String Path_Destination;
    String SignForTestSheetName;   
    String DocumentPassword;
    DefaultTableModel myTableModel;
    
    /** Creates new form ConverterFrame
     * @param aSourcePath
     * @param aDestinationPath
     * @param aSign
     * @param aPassword */
    public ConverterFrame(String aSourcePath, String aDestinationPath, String aSign, String aPassword) { 
        do_preBuild(aSourcePath, aDestinationPath, aSign, aPassword);
        initComponents();
        do_postBuild(aSourcePath, aDestinationPath);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_main = new javax.swing.JPanel();
        btn_convertToPDF = new javax.swing.JButton();
        lbl_listCount_source = new javax.swing.JLabel();
        lbl_listCount_destination = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_sourceFiles = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_destinationFiles = new javax.swing.JTable();
        jTextField_sourcePath = new javax.swing.JTextField();
        jTextField_destinationPath = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btn_close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(20, 20, 0, 0));

        btn_convertToPDF.setText("Excel -> PDF");
        btn_convertToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_convertToPDFActionPerformed(evt);
            }
        });

        lbl_listCount_source.setPreferredSize(new java.awt.Dimension(100, 14));

        lbl_listCount_destination.setPreferredSize(new java.awt.Dimension(100, 14));

        table_sourceFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Änderungsdatum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_sourceFiles.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(table_sourceFiles);
        if (table_sourceFiles.getColumnModel().getColumnCount() > 0) {
            table_sourceFiles.getColumnModel().getColumn(0).setPreferredWidth(150);
            table_sourceFiles.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        table_destinationFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Änderungsdatum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_destinationFiles.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane4.setViewportView(table_destinationFiles);
        if (table_destinationFiles.getColumnModel().getColumnCount() > 0) {
            table_destinationFiles.getColumnModel().getColumn(0).setPreferredWidth(150);
            table_destinationFiles.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        javax.swing.GroupLayout jPanel_mainLayout = new javax.swing.GroupLayout(jPanel_main);
        jPanel_main.setLayout(jPanel_mainLayout);
        jPanel_mainLayout.setHorizontalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField_sourcePath, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addComponent(lbl_listCount_source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_listCount_destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_mainLayout.createSequentialGroup()
                        .addComponent(btn_convertToPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                            .addComponent(jTextField_destinationPath))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_mainLayout.setVerticalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField_sourcePath, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(jTextField_destinationPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_listCount_destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_listCount_source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_mainLayout.createSequentialGroup()
                        .addComponent(btn_convertToPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_mainLayout.createSequentialGroup()
                        .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 11, Short.MAX_VALUE))))
        );

        btn_close.setText("Schließen");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_close)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(btn_close)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void do_preBuild(String aSourcePath, String aDestinationPath, String aSign, String aPassword) {
        Path_Source = aSourcePath;
        Path_Destination = aDestinationPath;
        SignForTestSheetName = aSign;
        DocumentPassword = aPassword;
    }
    private void do_postBuild(String aSourcePath, String aDestinationPath) {
        jTextField_sourcePath.setBorder(BorderFactory.createTitledBorder("Quell-Verzeichnis"));
        jTextField_sourcePath.setEditable(false);
        jTextField_sourcePath.setText(aSourcePath.substring(0, aSourcePath.length() - 1));
        
        jTextField_destinationPath.setBorder(BorderFactory.createTitledBorder("Ziel-Verzeichnis"));
        jTextField_destinationPath.setEditable(false);
        jTextField_destinationPath.setText(aDestinationPath.substring(0, aDestinationPath.length() - 1));
        
        this.do_fillTableWithSourceFiles();
        this.do_fillTableWithDestinationFiles();
    }
    
    private void do_fillTableWithSourceFiles()
    {        
        SimpleDateFormat myFormat = new SimpleDateFormat("dd.MM.yyyy   HH:mm:ss");
        myTableModel = (DefaultTableModel) table_sourceFiles.getModel();
        Date myModifiedDate;
        File f = new File(Path_Source);
        File [] myFileList;
        myFileList = f.listFiles();
        int myCountOfFiles = myFileList.length;
        for (int currentIndex = 0; currentIndex < myCountOfFiles; currentIndex++)
        {   
            if (myFileList[currentIndex].getName().startsWith("kp") && (myFileList[currentIndex].getName().endsWith(".xls") || (myFileList[currentIndex].getName().endsWith(".xlsx"))) && !myFileList[currentIndex].getName().contains("vk"))
            { 
                myModifiedDate = new Date(myFileList[currentIndex].lastModified());
                myTableModel.addRow(new Object[] {myFileList[currentIndex].getName(), myFormat.format(myModifiedDate)});
            }
        }  
        TableRowSorter<TableModel> mySorter = new TableRowSorter<>(table_sourceFiles.getModel());
        table_sourceFiles.setRowSorter(mySorter);
        mySorter.setModel(myTableModel);
        lbl_listCount_source.setText(String.valueOf(myTableModel.getRowCount()));
        if (myTableModel.getRowCount() > 0)
        {
            btn_convertToPDF.setEnabled(true);
        }       
    }
    
    private void do_fillTableWithDestinationFiles()
    {  
        myTableModel = (DefaultTableModel) table_destinationFiles.getModel();
        File f = new File(Path_Destination);
        File [] myFileList;
        myFileList = f.listFiles();
        int myCountOfFiles = myFileList.length;
        for (int currentIndex = 0; currentIndex < myCountOfFiles; currentIndex++)
        { 
            myTableModel.addRow(new Object[] {myFileList[currentIndex].getName(), myFileList[currentIndex].lastModified()});            
        }        
        TableRowSorter<TableModel> mySorter = new TableRowSorter<>(table_destinationFiles.getModel());
        table_destinationFiles.setRowSorter(mySorter);
        mySorter.setModel(myTableModel);
        lbl_listCount_destination.setText(String.valueOf(myTableModel.getRowCount()));
    }
    
    private void btn_convertToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_convertToPDFActionPerformed
        // TODO add your handling code here:
        //        System.out.println(list_sourceFiles.getSelectedValue());
        String myExcelPath = Path_Source;
        String myPDFPath = Path_Destination;        
        Object myRowObject;
        Workbook workbook;                  
        FileOutputStream myOutputStream;
        myTableModel = (DefaultTableModel) table_sourceFiles.getModel();
        int myRowCount = table_sourceFiles.getRowCount();
        System.out.println("Beginn: " + new Date());
        for (int myRowIndex = 0; myRowIndex < myRowCount; myRowIndex++)
        {
            myRowObject = myTableModel.getValueAt(myRowIndex, 0);
            String myRowValue = myRowObject.toString();
            if (myRowValue.endsWith(".xls") || myRowValue.endsWith(".xlsx"))
            {
                InputStream myInputStream = null;
                try
                {           
                    myInputStream = new FileInputStream(myExcelPath + myRowValue);
                    
                    workbook = WorkbookFactory.create(myInputStream);
                    int mySheetCount = workbook.getNumberOfSheets();
                    for (int sheetIndex = mySheetCount -1; sheetIndex >= 0; --sheetIndex)
                    {
                        if (!workbook.getSheetName(sheetIndex).toUpperCase().equals(SignForTestSheetName.toUpperCase()))
//                            if (!workbook.getSheetName(sheetIndex).toUpperCase().startsWith(SignForTestSheetName))
                        {
                            workbook.removeSheetAt(sheetIndex);
                        } 
//                        myDataSet.substring(0, myDataSet.indexOf("."));
                    }
                    if (workbook.getNumberOfSheets() > 0) {
                        myOutputStream = null;
                        myOutputStream = new FileOutputStream(myPDFPath + myRowValue.substring(0, myRowValue.indexOf("."))+ ".pdf"); 
                        workbook.write(myOutputStream);
                    }
//                    PdfADocument myPDF = new PdfADocument(new PdfWriter(myPDFPath + myRowValue.substring(0, myRowValue.indexOf("."))+ ".pdf"),
//                        PdfAConformanceLevel.PDF_A_1B,
//                        new PdfOutputIntent("Custom", "", "http://www.color.org",
//                        "sRGB IEC61966-2.1", myInputStream));
//                    PDFWriter myPDFWriter = new PDFWriter(myInputStream);
//                    myPDF.close();
                }
                catch (FileNotFoundException ex) 
                {
                    Logger.getLogger(ConverterFrame.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("file not found");
                }
                catch (IOException | InvalidFormatException | EncryptedDocumentException ex) 
                {
                    Logger.getLogger(ConverterFrame.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("IO, invalid format or encrypted document");                    
                }
                finally
                {
                    try {
                        if (myInputStream != null)
                        {
                            myInputStream.close();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ConverterFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } 
        }        
        lbl_listCount_destination.setText(String.valueOf(myTableModel.getRowCount()));
        System.out.println("Ende: " + new Date());
    }//GEN-LAST:event_btn_convertToPDFActionPerformed

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_closeActionPerformed
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConverterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConverterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConverterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConverterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            String temp = "source";
            String temp2  = "destination";
            String temp3  = "sign";
            String temp4  = "password";
            new ConverterFrame(temp, temp2, temp3, temp4).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_close;
    private javax.swing.JButton btn_convertToPDF;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_main;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField_destinationPath;
    private javax.swing.JTextField jTextField_sourcePath;
    private javax.swing.JLabel lbl_listCount_destination;
    private javax.swing.JLabel lbl_listCount_source;
    private javax.swing.JTable table_destinationFiles;
    private javax.swing.JTable table_sourceFiles;
    // End of variables declaration//GEN-END:variables
   
 }
